// =====================================================
// ------------ Siegmeyer II Tools - Units -------------
// =====================================================
// @author Thomas Bredin-Grey <tom@studiothick.com>
// Siegmeyer II: https://github.com/tbredin/Siegmeyer2
// =====================================================


// Returns a unitless number
@function no-unit($number) {
    $result: $number;
    @if unit($number) == "px" {
        $result: $number / 1px;
    } @else if unit($number) == "em" {
        $result: $number / 1em;
    } @else if unit($number) == "%" {
        $result: $number / 1%;
    } @else if unit($number) == "rem" {
        $result: $number / 1rem;
    }
    @return $result;
}


// Converts an em value to px. Should only work in absolute em document context (root level)
@function em-to-px($value) {
    @if unit($value) == "em" {
        $value : no-unit($value) * no-unit($current-root);
        $value : $value * 1px;
    }
    @return $value;
}

// Converts an rem value to px. Should only work in absolute em document context (root level)
@function rem-to-px($value, $context: $current-root) {
    @if unit($value) == "rem" {
        $value : no-unit($value) * no-unit($context);
        $value : $value * 1px;
    }
    @return $value;
}


// Converts a px value to ems. Should only work in absolute em document context (root level), unless $context is specified
@function px-to-ems($value, $context: $current-root * 1px) {
    @if unit($context) == "em" {
        $context: em-to-px($context);
    }
    @if unit($value) == "px" {
        $value : no-unit($value) / no-unit($context);
        $value : $value * 1em;
    }
    @return $value;
}


// Converts a px value to ems. Should only work in absolute em document context (root level), unless $context is specified
@function px-to-rems($value, $context: $current-root * 1px) {
    @if unit($context) == "rem" {
        $context: rem-to-px($context);
    }
    @if unit($value) == "px" {
        $value : no-unit($value) / no-unit($context);
        $value : $value * 1rem;
    }
    @return $value;
}

// return integer
@function parseInt($n) {
    @return $n / ($n * 0 + 1);
}


// produce legacy fallback for rem units
// eg: @include rem(height, 4rem);
// eg: @include rem(border-width, 1rem 5px 5% 0);
@mixin rem($property, $values) {
    $px : ();
    $rem: ();
    $context: index($breaks, $current-breakpoint);
    $base: nth($sizes, $context);

    @each $value in $values {

        @if type-of($value) == number {
            $unit: unit($value);
            $val: parseInt($value);

            @if $unit == "rem" {
                $px : append($px,  (round($val * $base) + px));
                $rem: append($rem, $value);
            } @else {
                $px : append($px,  $value);
                $rem: append($rem, $value);
            }
        } @else {
            $px : append($px , $value);
            $rem: append($rem, $value);
        }
    }

    @if $px == $rem {
        #{$property}: $px;
    } @else {
        #{$property}: $px;

        @if $parse-rem == true {
            #{$property}: $rem;
        }
    }
}

@mixin fill-container {
    .container & {
        margin-left: -$grid-gutter-width * 2;
        margin-right: -$grid-gutter-width * 2;
    }
    .container.side-bar_open & {
        margin-left: -55px;
    }
}

