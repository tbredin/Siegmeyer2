// =====================================================
// ---------------- Siegmeyer II Mixins ----------------
// =====================================================
// @author Thomas Bredin-Grey <tom@studiothick.com>
// Siegmeyer II: https://github.com/tbredin/Siegmeyer2
// =====================================================


// Breakpoints. Either set one to one of the breakpoint variables, or use a custom value for minor breakpoints.
// Defaults to min-width, but both min->max and max-width are available too.
// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7
@mixin breakpoint($break: 0, $max: 0) {
    // Type of break variable
    $value: type-of($break);
    $unit: "";

    @if $value != string {
        $unit: unit($break);
    }

    // If it is a string (i.e. a breakpoint variable).
    @if $value == string {
        // If using 'break-1', 'break-2' etc output the correct breakpoints from map.
        @if map-has-key($breakpoint-map, $break) {
            @media screen and (min-width: #{break-get($break, start) / 16px * 1em} ) { @content; }
        } @else {
            @warn "#{$break} is not a set breakpoint variable";
        }
    } @else if  $value == number {
        @if $unit == "px" or $unit == "" {
            $break-get: no-unit($break);
            $max-val: no-unit($max);

            // If using other numbers output value in ems either for min, min & max or max width breakpoints.
            $query: "all" !default;
            @if $break-get != 0 and $max-val != 0 {
                $query: "(min-width: #{$break-get / 16 * 1em}) and (max-width: #{$max-val / 16 * 1em})";
            } @else if $break-get != 0 and $max-val == 0 {
                $query: "(min-width: #{$break-get / 16 * 1em})";
            } @else if $break-get == 0 and $max-val != 0 {
                $query: "(max-width: #{$max-val / 16 * 1em})";
            }
            @media #{$query} { @content; }
        } @else {
            @warn "#{$break} is not valid for use in breakpoint - use a unitless number, pixels, or a breakpoint key";
        }
    }
}


// wrapper for combining breakpoint mixin and susy 'with layout' mixin. Also exposes current breakpoint to content via $current-breakpoint/root variables
@mixin breakpoint-layout($match-breakpoint) {
    @if map-has-key($breakpoint-map, $match-breakpoint) {
        // make current breakpoint context available in global scope
        $current-breakpoint: $match-breakpoint !global;
        $current-root: break-get($match-breakpoint, size) !global;

        @include breakpoint($match-breakpoint) {
            @include with-layout(break-get($match-breakpoint, layout)) {
                @content;
            }
        }

        // reset current breakpoint context
        $current-breakpoint: break-0 !global;
        $current-root: break-get(break-0, size) !global;
    } @else {
        @warn "#{$match-breakpoint} is not a set breakpoint variable";
    }
}

// shorthand function to retreive breakpoint values
@function break-get($break, $val) {
    @return map-get(map-get($breakpoint-map, $break), $val);
}

// sets containers for all breakpoints. It is important to use this to avoid incorrect breakpoint values due to type scaling
@mixin set-container {
    @extend %container;
}
// extend helper for cleaner markup
%container {
    @include layout(break-get(break-0, layout));
    padding-left: $gutter;
    padding-right: $gutter;
    box-sizing: border-box;

    @if break-get(break-0, max) != none {
        $break-adjusted: px-to-ems(break-get(break-0, max), 1px * nth($sizes, 1));
        @if $debug-grid == true and $debug-allow == true {
            @include container($break-adjusted show-columns);
        } @else {
            @include container($break-adjusted hide);
        }
    }

    $i: 1;
    @each $break in $breaks {
         @if ($break != break-0) and break-get($break, max) != none {
            @include breakpoint-layout($break) {
                $break-adjusted: px-to-ems(break-get($break, max), 1px * nth($sizes, $i));

                @if $debug-grid == true and $debug-allow == true {
                    @include container($break-adjusted show-columns);
                } @else {
                    @include container($break-adjusted hide);
                }
            }
        }
        $i: $i + 1;
    }
}

// debug breakpoints
@mixin debug-breakpoints{
    body {
        // margin-bottom: 2rem;

        &:before, &:after {
            display: block;
            position: fixed;
            box-sizing: border-box;
            bottom: 0;
            animation-fill-mode: both;
            @include rem(height, 2rem);
            @include rem(line-height, 2rem);
        }

        &:before {
            text-align: center;
            background-color: $debug-color;
            background-color: transparentize($debug-color, 0.15);
            color: #fff;
            @include rem(font-size, 0.875rem);
            z-index: 10000;
            // @include fontsize(iota, all);
            @include rem(padding, 0 2rem);
            border: 1px solid lighten($debug-color, 10%);
            text-shadow: 0 -1px 0 darken($debug-color, 25%);
            width: 100%;
            animation: breakpoint-info-in 1s ease-out;

            @each $break in $breaks {
                @include breakpoint-layout($break) {
                    content: "#{$break} ---- cols: #{break-get($break, cols)} ---- start: #{break-get($break, start)} ---- max-width: #{break-get($break, max)}"
                }
            }
        }

        &:after {
            content: ".";
            color: transparent;
            z-index: 10001;
            left: 50%;
            transform: translateX(-50%);
            @include rem(padding, 0.25rem 0 0);
            animation: breakpoint-marker-in 1s ease-out;

            @include breakpoint(break-1) {
                border-left: 1px dotted lighten($debug-color, 15%);
                border-right: 1px dotted lighten($debug-color, 15%);
            }

            @each $break in $breaks {
                @include breakpoint-layout($break) {
                    width: break-get($break, start);
                }
            }
        }
    }

    @keyframes breakpoint-info-in {
        0% {
            transform: translateY(100%) translateZ(0);
        }
        100% {
            transform: translateZ(0);
        }
    }

    @keyframes breakpoint-marker-in {
        0% {
            transform: translateY(100%) translateX(-50%) translateZ(0);
        }
        100% {
            transform: translateX(-50%) translateZ(0);
        }
    }
}


// type shorthand helpers
// get font family
@function font-family-of($type) {
    @return unquote(map-get($type, font-family));
}

// get bold weight
@function bold-of($type) {
    @return unquote(map-get($type, bold));
}

// get regular weight
@function regular-of($type) {
    @return unquote(map-get($type, regular));
}

// get cap-height
@function cap-height-of($type) {
    @return unquote(map-get($type, cap-height));
}

// get cap-height weight
@function italic-of($type) {
    @return unquote(map-get($type, italic));
}

// recommended technique for svg img inclusion - use a wrapper that will maintain aspect ratio
@mixin svg-frame($w: 1, $h: 1) {
    @include scut-ratio-box($w / $h);
    display: block;
    transform: translateZ(0);

    img {
        opacity: 0;

        &[src$=".png"] {
            opacity: 1;
        }
    }

    > svg {
        @extend %svg-fill;
    }
}

%svg-fill {
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
}

// svg background image with png fallbacks
@mixin svg-bg($name, $size: false, $hires: false){
    background-image: url(#{$image-path}/#{$name}.svg);

    @if ($size) {
        background-size: $size;
    }

    @at-root .no-svg & {
        background-image: url(#{$image-path}/#{$name}.png);

        @if ($hires) {
            @media only screen and (min-device-pixel-ratio: 1.5) {
                background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.png);
            }
        }
    }
}

// Clearfix.
@mixin clearfix {
    &:before, &:after{
        display: table;
        content: "";
    }
    &:after{
        clear: both;
    }
}


// set on typeset items to extend typography found in typography.scss
@mixin typeset {
    @extend %typeset;

    position: relative;
}


// Root font-size in %, outputted in correct breakpoints.
@mixin rootsize {
    $min-size: nth($sizes, 1);
    $max-size: nth($sizes, 2);
    $min-width: break-get(nth($breaks, 2), start) / 2;
    $max-width: break-get(nth($breaks, 2), start);

    font-size: $min-size * 1px;

    @media screen and (min-width: break-get(nth($breaks, 2), start) / 2 / 16px * 1em) {
        font-size: calc(#{$min-size * 1px} + #{no-unit($max-size) - no-unit($min-size)} * (100vw - #{$min-width}) / #{no-unit($max-width) - no-unit($min-width)});
    }

    // // Loop through breakpoints.
    @for $i from 2 through $breakpoint-count {
        @media screen and (min-width: break-get(nth($breaks, $i), start) / 16px * 1em) {
            $min-size: nth($sizes, $i);
            $min-width: break-get(nth($breaks, $i), start);

            font-size: $min-size * 1%;

            @if $i < $breakpoint-count {
                $max-size: nth($sizes, $i + 1);
                $max-width: break-get(nth($breaks, $i + 1), start);
            } @else {
                // largest breakpoint. Keep the scaling consitent with the previous breakpoint
                $size-diff: nth($sizes, $i) - nth($sizes, $i - 1);
                $width-diff: break-get(nth($breaks, $i), start) - break-get(nth($breaks, $i - 1), start);
                $max-size: nth($sizes, $i) + $size-diff;
                $max-width: break-get(nth($breaks, $i), start) + $width-diff;

            }

            font-size: calc(#{$min-size * 1px} + #{no-unit($max-size) - no-unit($min-size)} * (100vw - #{$min-width}) / #{no-unit($max-width) - no-unit($min-width)});
        }
    }
}

// sometimes type info can get out of date.
// for example if used in a breakpoint elsewhere to where the type mixin is originally set
@mixin set-type-info($fontsize: false, $lineheight: false, $leader: false, $trailer: false, $multiplier: false) {
    // set global variables so they can be accessed elsewhere
    @if $fontsize != false {
        $current-type-size: $fontsize !global;
    }
    @if $lineheight != false {
        $current-type-lineheight: $lineheight !global;
    }
    @if $leader != false {
        $current-type-leader: $leader !global;
    }
    @if $trailer != false {
        $current-type-trailer: $trailer !global;
    }
    @if $multiplier != false {
        $current-type-multiplier: $multiplier !global;
    }
}



// Set fontsize and baseline at once
@mixin type($font, $fontsize, $lineheight: 2, $leader: 0, $trailer: 0, $scale-ratio: 1) {
    $font-value: type-of($fontsize);
    $cap-height: map-get($font, cap-height);
    $context: index($breaks, $current-breakpoint);
    $font-calc: no-unit($fontsize) * nth($sizes, $context);
    $font-unit: unit($fontsize);

    // set line height if different to default
    @include rem(line-height, $lineheight * 1rem);

    @if $font-value == number or $font-unit != rem {
        @include rem(font-size, $fontsize);

        $baseline-shift: ($font-calc / 2 * (($lineheight * $current-root / $font-calc) - $cap-height)) / $current-root + 0.00001;
        $baseline-push: 0 - (($font-calc / 2 * (($lineheight * $current-root / $font-calc) - $cap-height)) / $current-root + 0.00001);

        $leader-calc: $leader;
        $trailer-calc: $trailer;
        // correct for negative values
        @if $baseline-shift < 0 {
            $correction-bls: -1 * floor($baseline-shift);
            $baseline-shift: $baseline-shift + $correction-bls;
            $leader-calc: $leader - $correction-bls;
        }

        @if $baseline-push < 0 {
            $correction-blp: -1 * floor($baseline-push);
            $baseline-push: $baseline-push + $correction-blp;
            $trailer-calc: $trailer - $correction-blp;
        }

        @include rem(padding-top, $baseline-shift * 1rem);
        @include rem(padding-bottom, $baseline-push * 1rem);

        @include leader($leader-calc);
        @include trailer($trailer-calc);

        // correct for extra baseline unit of space if trailer is 0
        @if $trailer == 0 {
            @include rem(margin-bottom, -1rem);
        } @else {
            @include rem(margin-bottom, 0);
        }

        // correct for line height more than a line taller than type; remove 1 from top
        $remainder: $lineheight * nth($sizes, $context) - $font-calc;

        @if $remainder <= 0 {
            $remainder: 0;
            @include rem(margin-top, 0);
        } @else {
            $remainder: 1rem;
            @include rem(margin-top, -1rem);
        }

        // set global variables so they can be accessed elsewhere
        @include set-type-info($fontsize, $lineheight, $leader, $trailer, 1);

        @if $debug-allow == true and $debug-baseline == true {
            position: relative;
            z-index: 0;

            &:hover {
                cursor: pointer;
                z-index: 10000;

                &:before {
                    position: absolute;
                    bottom: calc(100% + #{$leader * 1rem - $remainder});
                    left: 0;
                    background-color: opacify($debug-color, 1);
                    content: "size: #{$current-type-size} | line-height: #{$current-type-lineheight} | lead: #{$current-type-leader} | trail: #{$current-type-trailer}";
                    font-size: 10px;
                    line-height: 12px;
                    color: #fff;
                    padding: 0.5em;
                    border-radius: 4px 4px 0 0;
                    letter-spacing: 0.075em;
                    -webkit-font-smoothing: subpixel-antialiased;
                    border-bottom: 1px solid darken($debug-color, 8%);
                    text-indent: 0;
                    font-family: font-family-of($body-type);
                }

                &:after {
                    background: transparentize($debug-color, 0.75);
                    content: "";
                    position: absolute;
                    left: 0;
                    right: 0;
                    top: -$leader-calc * 1rem + $remainder;
                    bottom: -$trailer-calc * 1rem;
                    box-sizing: border-box;
                    border: 2px solid transparentize($debug-color, 0.5);

                    @if $leader > 0 {
                        border-top-color: transparentize($debug-color, 0.5);
                        border-top-width: $leader * 1rem;
                    }

                    @if $trailer > 0 {
                        border-bottom-color: transparentize($debug-color, 0.5);
                        border-bottom-width: $trailer * 1rem;
                    }
                }
            }
        }
    } @else {
        @warn "#{$fontsize} is not a valid font size. Please use rems";
    }
}

// set leader spacing
@mixin leader($units) {
    $current-type-leader: $units !global;
    $context: index($breaks, $current-breakpoint);

    @if ($units > 0) {
        @include rem(border-top, $units * 1rem solid transparent);
    } @else {
        border-top: 0 none;
    }

    @if $debug-allow == true and $debug-baseline == true {
        &:hover {
            &:before {
                @if $current-breakpoint == break-0 or $current-type-multiplier == 1 {
                    content: "size: #{$current-type-size} | line-height: #{$current-type-lineheight} | lead: #{$current-type-leader} | trail: #{$current-type-trailer}";
                } @else {
                    $val: index($breaks, $current-breakpoint);
                    val: $val;
                    content: "size: #{$current-type-size * $current-type-multiplier}* (#{$current-type-size}) | line-height: #{round($current-type-lineheight * $current-type-multiplier)}* (#{$current-type-lineheight}) | lead: #{$current-type-leader} | trail: #{$current-type-trailer} | *BP: #{$context}";
                }
                bottom: calc(100% + #{$units * 1rem});
            }
            &:after {
                top: -$units * 1rem;

                @if $units > 0 {
                    border-top-color: transparentize($debug-color, 0.5);
                    border-top-width: $units * 1rem;
                }
            }
        }
    }
}

// set trailer spacing
@mixin trailer($units, $correct: false) {
    $units-calc: $units;
    $current-type-trailer: $units !global;
    $context: index($breaks, $current-breakpoint);

    // option to correct for extra line height
    @if ($correct == true) {
        $units-calc: $units - 1;
    }

    @if ($units-calc > 0) {
        @include rem(border-bottom, $units-calc * 1rem solid transparent);
    } @else {
        border-bottom: 0 none;
    }

    @if $debug-allow == true and $debug-baseline == true {
        &:hover {
            &:before {
                @if $current-breakpoint == break-0 or $current-type-multiplier == 1 {
                    content: "size: #{$current-type-size} | line-height: #{$current-type-lineheight} | lead: #{$current-type-leader} | trail: #{$current-type-trailer}";
                } @else {
                    content: "size: #{$current-type-size * $current-type-multiplier}* (#{$current-type-size}) | line-height: #{round($current-type-lineheight * $current-type-multiplier)}* (#{$current-type-lineheight}) | lead: #{$current-type-leader} | trail: #{$current-type-trailer} | *BP: #{$context}";
                }
            }
            &:after {
                bottom: -$units-calc * 1rem;

                @if $units > 0 {
                    border-bottom-color: transparentize($debug-color, 0.5);
                    border-bottom-width: $units * 1rem;
                }
            }
        }
    }
}

// resets type, negates type rhythm
@mixin reset-type() {
    @extend %reset-type;
}

%reset-type {
    border-top: 0 none;
    border-bottom: 0 none;
    padding-top: 0;
    padding-bottom: 0;
    margin-top: 0;
    margin-bottom: 0;

    @if $debug-allow == true and $debug-baseline == true {
        &:hover {
            &:before,
            &:after {
                display: none;
                content: none;
            }
        }
    }
}

// match inner type to container
@mixin type-match {
    line-height: 0;
}

// better text decoration
@mixin text-link($color: #fff, $hover: $color, $pos: 98%) {
    font-family: font-family-of($display-type);
    -webkit-font-smoothing: antialiased;
    color: $color;
    background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,transparentize($color, 0.4) 50%);
    background-repeat: repeat-x;
    background-size: 2px 0.065em;
    background-position: 0 $pos;
    transition: color .1s ease, background .5s ease, outline 0.25s ease;

    &:hover {
        color: $hover;
        background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,transparentize($hover, 0.15) 50%);
    }

    .lt-ie10 & {
        text-decoration: underline; // ie9 only
    }
}
